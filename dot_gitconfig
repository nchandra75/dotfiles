[user]
	email = nitin@ee.iitm.ac.in
	name = Nitin Chandrachoodan
[init]
	defaultBranch = main

[core]
    pager = delta

[interactive]
    diffFilter = delta --color-only

[delta]
    navigate = true  # Use 'n' and 'N' to move between diff sections

[merge]
    conflictstyle = diff3

[diff]
	colorMoved = default

[alias]
    # Basic shortcuts
    st = status -sb
    co = checkout
    br = branch
    ci = commit
    cp = cherry-pick

    # Branch management
    bd = branch -d
    bD = branch -D

    # Detailed log views
    lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative

    # More detailed log with stats
    lgst = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative --stat

	# all commits pretty printed
	lol = log --all --graph --oneline

    # Show last 10 commits in a compact format
    last = log -10 --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative

    # Show modified files in last commit
    dl = "!git ll -1"

    # Show a diff of files in staging
    staged = diff --cached

    # List all aliases
    aliases = "!git config -l | grep alias | cut -c 7-"

    # Better diff with word difference highlighting
    dw = diff --word-diff=color

    # Search through commit messages
    search = "!f() { git log --all --grep=$1; }; f"

    # Show verbose output about tags, branches, or remotes
    tags = tag -l
    branches = branch -a
    remotes = remote -v

    # Credit an author on the latest commit
    credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

    # Find branches containing commit
    fb = "!f() { git branch -a --contains $1; }; f"

    # Find commits by source code
    fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

    # List contributors with number of commits
    contributors = shortlog --summary --numbered

    # Interactive rebase with the given number of latest commits
    reb = "!r() { git rebase -i HEAD~$1; }; r"

    # Search for file in current tree (case insensitive)
    find = "!f() { git ls-files | grep -i \"$1\"; }; f"

    # Search for file in all commits (case insensitive)
    search-files = "!f() { git log --all --full-history --name-status -i --grep=\"$1\" --perl-regexp; }; f"

	# Find deleted files in history (case insensitive)
    find-deleted = "!f() { \
        git log --all --full-history --diff-filter=D --name-status | \
        grep -i \"^D.*$1\" | \
        awk '{print $2}' | \
        sort -u; \
    }; f"

	# Search for file in all commits (case insensitive)
    search-files = "!f() { \
        git log --all --full-history --name-status | \
        awk -v pattern=\\"\\$1\\" 'BEGIN{IGNORECASE=1} { \
            if ($1 ~ /^[0-9a-f]+/) { commit=$1 } \
            else if ($2 ~ pattern || $NF ~ pattern) { print commit \\":\\", $0 } \
        }' | \
        sort -u; \
		}; f"
		
    # Show full history of a file (including renames)
    file-history = "!f() { git log --full-history --all -- \"**/$1\"; }; f"

    # Find files with similar names (fuzzy match)
    fuzzy = "!f() { \
        git ls-files | awk -v search=\"$1\" '{ \
            split(search, chars, \"\"); \
            match_count = 0; \
            for (i=1; i<=length(chars); i++) { \
                if (tolower($0) ~ tolower(chars[i])) match_count++; \
            } \
            if (match_count >= length(chars) * 0.7) print $0; \
        }'; \
    }; f"

    # Show all unique file extensions in repo
    extensions = "!f() { \
        git ls-files | grep -i \\"\\.\\" | sed 's/.*\\.//g' | sort -u; \
    }; f"

    # Find largest files in git history
    find-large = "!f() { \
        git rev-list --all --objects | \
        git cat-file --batch-check='%(objecttype) %(objectname) %(objectsize) %(rest)' | \
        sed -n 's/^blob //p' | \
        sort -k2nr | \
        head -n 10 | \
        while read hash size path; do \
            echo \"$((size / 1024 / 1024))MB $path\"; \
        done; \
    }; f"
	find-empty = "!f() { git log --all --pretty=%H | while read commit; do if [ $(git diff-tree --no-commit-id --name-only -r $commit | wc -l) -eq 0 ]; then echo -n \"$commit \"; git log -1 --pretty=format:\"%ai %s\" $commit; fi; done; }; f"
	show-empty = "!f() { for commit in $(git rev-list HEAD); do if [ $(git diff-tree --no-commit-id --name-only -r $commit | wc -l) -eq 0 ]; then echo -n \"$commit \"; git log -1 --pretty=format:\"%ai %s\" $commit; echo; fi; done; }; f"
	sns = "show --name-status -- "

[color]
    # Use colors in Git commands that are capable of colored output
    ui = auto

[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green

[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold

[color "status"]
    added = yellow
    changed = green
    untracked = red

[core]
    # Use custom `.gitignore` and `.gitattributes`
    excludesfile = ~/.gitignore
    attributesfile = ~/.gitattributes

    # Treat spaces before tabs and all kinds of trailing whitespace as an error
    whitespace = space-before-tab,-indent-with-non-tab,trailing-space

    # Make `git rebase` safer on macOS
    trustctime = false

    # Prevent showing files whose names contain non-ASCII symbols as unversioned
    precomposeunicode = false
	autocrlf = false
	eol = crlf

[help]
    # Automatically correct and execute mistyped commands
    autocorrect = 1

[merge]
    # Include summaries of merged commits in newly created merge commit messages
    log = true
